{"version":3,"file":"webusb.esm.js","sources":["../node_modules/rollup-plugin-node-builtins/src/es6/events.js","../src/dispatcher.ts","../src/configuration.ts","../src/interface.ts","../src/alternate.ts","../src/endpoint.ts","../src/device.ts","../src/adapter.ts","../src/usb.ts","../src/index.ts"],"sourcesContent":["'use strict';\n\nvar domain;\n\n// This constructor is used to store event handlers. Instantiating this is\n// faster than explicitly calling `Object.create(null)` to get a \"clean\" empty\n// object (tested with v8 v4.9).\nfunction EventHandlers() {}\nEventHandlers.prototype = Object.create(null);\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nexport default EventEmitter;\nexport {EventEmitter};\n\n// nodejs oddity\n// require('events') === require('events').EventEmitter\nEventEmitter.EventEmitter = EventEmitter\n\nEventEmitter.usingDomains = false;\n\nEventEmitter.prototype.domain = undefined;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\nEventEmitter.init = function() {\n  this.domain = null;\n  if (EventEmitter.usingDomains) {\n    // if there is an active domain, then attach to it.\n    if (domain.active && !(this instanceof domain.Domain)) {\n      this.domain = domain.active;\n    }\n  }\n\n  if (!this._events || this._events === Object.getPrototypeOf(this)._events) {\n    this._events = new EventHandlers();\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || isNaN(n))\n    throw new TypeError('\"n\" argument must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nfunction $getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return $getMaxListeners(this);\n};\n\n// These standalone emit* functions are used to optimize calling of event\n// handlers for fast cases because emit() itself often has a variable number of\n// arguments and can be deoptimized because of that. These functions always have\n// the same number of arguments and thus do not get deoptimized, so the code\n// inside them can execute faster.\nfunction emitNone(handler, isFn, self) {\n  if (isFn)\n    handler.call(self);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self);\n  }\n}\nfunction emitOne(handler, isFn, self, arg1) {\n  if (isFn)\n    handler.call(self, arg1);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1);\n  }\n}\nfunction emitTwo(handler, isFn, self, arg1, arg2) {\n  if (isFn)\n    handler.call(self, arg1, arg2);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2);\n  }\n}\nfunction emitThree(handler, isFn, self, arg1, arg2, arg3) {\n  if (isFn)\n    handler.call(self, arg1, arg2, arg3);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].call(self, arg1, arg2, arg3);\n  }\n}\n\nfunction emitMany(handler, isFn, self, args) {\n  if (isFn)\n    handler.apply(self, args);\n  else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      listeners[i].apply(self, args);\n  }\n}\n\nEventEmitter.prototype.emit = function emit(type) {\n  var er, handler, len, args, i, events, domain;\n  var needDomainExit = false;\n  var doError = (type === 'error');\n\n  events = this._events;\n  if (events)\n    doError = (doError && events.error == null);\n  else if (!doError)\n    return false;\n\n  domain = this.domain;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    er = arguments[1];\n    if (domain) {\n      if (!er)\n        er = new Error('Uncaught, unspecified \"error\" event');\n      er.domainEmitter = this;\n      er.domain = domain;\n      er.domainThrown = false;\n      domain.emit('error', er);\n    } else if (er instanceof Error) {\n      throw er; // Unhandled 'error' event\n    } else {\n      // At least give some kind of context to the user\n      var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n      err.context = er;\n      throw err;\n    }\n    return false;\n  }\n\n  handler = events[type];\n\n  if (!handler)\n    return false;\n\n  var isFn = typeof handler === 'function';\n  len = arguments.length;\n  switch (len) {\n    // fast cases\n    case 1:\n      emitNone(handler, isFn, this);\n      break;\n    case 2:\n      emitOne(handler, isFn, this, arguments[1]);\n      break;\n    case 3:\n      emitTwo(handler, isFn, this, arguments[1], arguments[2]);\n      break;\n    case 4:\n      emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);\n      break;\n    // slower\n    default:\n      args = new Array(len - 1);\n      for (i = 1; i < len; i++)\n        args[i - 1] = arguments[i];\n      emitMany(handler, isFn, this, args);\n  }\n\n  if (needDomainExit)\n    domain.exit();\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n\n  events = target._events;\n  if (!events) {\n    events = target._events = new EventHandlers();\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (!existing) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] = prepend ? [listener, existing] :\n                                          [existing, listener];\n    } else {\n      // If we've already got an array, just append.\n      if (prepend) {\n        existing.unshift(listener);\n      } else {\n        existing.push(listener);\n      }\n    }\n\n    // Check for listener leak\n    if (!existing.warned) {\n      m = $getMaxListeners(target);\n      if (m && m > 0 && existing.length > m) {\n        existing.warned = true;\n        var w = new Error('Possible EventEmitter memory leak detected. ' +\n                            existing.length + ' ' + type + ' listeners added. ' +\n                            'Use emitter.setMaxListeners() to increase limit');\n        w.name = 'MaxListenersExceededWarning';\n        w.emitter = target;\n        w.type = type;\n        w.count = existing.length;\n        emitWarning(w);\n      }\n    }\n  }\n\n  return target;\n}\nfunction emitWarning(e) {\n  typeof console.warn === 'function' ? console.warn(e) : console.log(e);\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction _onceWrap(target, type, listener) {\n  var fired = false;\n  function g() {\n    target.removeListener(type, g);\n    if (!fired) {\n      fired = true;\n      listener.apply(target, arguments);\n    }\n  }\n  g.listener = listener;\n  return g;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  if (typeof listener !== 'function')\n    throw new TypeError('\"listener\" argument must be a function');\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      if (typeof listener !== 'function')\n        throw new TypeError('\"listener\" argument must be a function');\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      list = events[type];\n      if (!list)\n        return this;\n\n      if (list === listener || (list.listener && list.listener === listener)) {\n        if (--this._eventsCount === 0)\n          this._events = new EventHandlers();\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length; i-- > 0;) {\n          if (list[i] === listener ||\n              (list[i].listener && list[i].listener === listener)) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (list.length === 1) {\n          list[0] = undefined;\n          if (--this._eventsCount === 0) {\n            this._events = new EventHandlers();\n            return this;\n          } else {\n            delete events[type];\n          }\n        } else {\n          spliceOne(list, position);\n        }\n\n        if (events.removeListener)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events;\n\n      events = this._events;\n      if (!events)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (!events.removeListener) {\n        if (arguments.length === 0) {\n          this._events = new EventHandlers();\n          this._eventsCount = 0;\n        } else if (events[type]) {\n          if (--this._eventsCount === 0)\n            this._events = new EventHandlers();\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        for (var i = 0, key; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = new EventHandlers();\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners) {\n        // LIFO order\n        do {\n          this.removeListener(type, listeners[listeners.length - 1]);\n        } while (listeners[0]);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  var evlistener;\n  var ret;\n  var events = this._events;\n\n  if (!events)\n    ret = [];\n  else {\n    evlistener = events[type];\n    if (!evlistener)\n      ret = [];\n    else if (typeof evlistener === 'function')\n      ret = [evlistener.listener || evlistener];\n    else\n      ret = unwrapListeners(evlistener);\n  }\n\n  return ret;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];\n};\n\n// About 1.5x faster than the two-arg version of Array#splice().\nfunction spliceOne(list, index) {\n  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)\n    list[i] = list[k];\n  list.pop();\n}\n\nfunction arrayClone(arr, i) {\n  var copy = new Array(i);\n  while (i--)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\n\n/**\n * @hidden\n */\nexport class EventDispatcher extends EventEmitter {\n\n    // tslint:disable-next-line:array-type\n    public addEventListener(event: string | symbol, listener: (...args: any[]) => void) {\n        return super.addListener(event, listener);\n    }\n\n    // tslint:disable-next-line:array-type\n    public removeEventListener(event: string | symbol, listener: (...args: any[]) => void) {\n        return super.removeListener(event, listener);\n    }\n\n    public dispatchEvent(event: string | symbol, value?: any) {\n        return super.emit(event, {\n            type: event,\n            target: this,\n            value: value\n        });\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBInterface } from \"./interface\";\n\n/**\n * USB Configuration\n */\nexport class USBConfiguration {\n\n    /**\n     * The value of this configuration\n     */\n    public readonly configurationValue: number = null;\n\n    /**\n     * The name of this configuration\n     */\n    public readonly configurationName?: string = null;\n\n    /**\n     * The array of interfaces on this configuration\n     */\n    public readonly interfaces: Array<USBInterface> = [];\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBConfiguration>) {\n        this.configurationValue = init.configurationValue;\n        this.configurationName = init.configurationName;\n        this.interfaces = init.interfaces;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBAlternateInterface } from \"./alternate\";\nimport { adapter } from \"./adapter\";\n\n/**\n * USB Interface\n */\nexport class USBInterface {\n\n    /**\n     * Number of this interface\n     */\n    public readonly interfaceNumber: number = null;\n\n    /**\n     * Array of alternate interfaces\n     */\n    public readonly alternates: Array<USBAlternateInterface> = [];\n\n    private _claimed: boolean = false;\n    /**\n     * Whether this interface is claimed\n     */\n    public get claimed(): boolean {\n        return this._claimed;\n    }\n\n    private _currentAlternate: number = 0;\n    /**\n     * Return the current alternate interface\n     */\n    public get alternate(): USBAlternateInterface {\n        return this.alternates.find(alternate => alternate.alternateSetting === this._currentAlternate);\n    }\n\n    /**\n     * @hidden\n     */\n    public readonly _handle: string = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBInterface>) {\n        this.interfaceNumber = init.interfaceNumber;\n        this.alternates = init.alternates;\n\n        this._handle = init._handle;\n    }\n\n    /**\n     * @hidden\n     */\n    public selectAlternateInterface(alternateSetting: number): Promise<void> {\n        return adapter.selectAlternateInterface(this._handle, this.interfaceNumber, alternateSetting)\n        .then(() => {\n            this._currentAlternate = alternateSetting;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public claimInterface(): Promise<void> {\n        return adapter.claimInterface(this._handle, this.interfaceNumber)\n        .then(() => {\n            this._claimed = true;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public releaseInterface(): Promise<void> {\n        return adapter.releaseInterface(this._handle, this.interfaceNumber)\n        .then(() => {\n            this._claimed = false;\n        });\n    }\n\n    /**\n     * @hidden\n     */\n    public reset() {\n        this._currentAlternate = 0;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBEndpoint } from \"./endpoint\";\n\n/**\n * USB Alternate Interface\n */\nexport class USBAlternateInterface {\n\n    /**\n     * The alternate setting for this interface\n     */\n    public readonly alternateSetting: number = null;\n\n    /**\n     * The class of this interface\n     */\n    public readonly interfaceClass: number = null;\n\n    /**\n     * The sub class of this interface\n     */\n    public readonly interfaceSubclass: number = null;\n\n    /**\n     * The protocol of this interface\n     */\n    public readonly interfaceProtocol: number = null;\n\n    /**\n     * The name of this interface\n     */\n    public readonly interfaceName?: string = null;\n\n    /**\n     * The array of endpoints on this interface\n     */\n    public readonly endpoints: Array<USBEndpoint> = [];\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBAlternateInterface>) {\n        this.alternateSetting = init.alternateSetting;\n        this.interfaceClass = init.interfaceClass;\n        this.interfaceSubclass = init.interfaceSubclass;\n        this.interfaceProtocol = init.interfaceProtocol;\n        this.interfaceName = init.interfaceName;\n        this.endpoints = init.endpoints;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USBDirection, USBEndpointType } from \"./enums\";\n\n/**\n * USB Endpoint\n */\nexport class USBEndpoint {\n\n    /**\n     * The number of this endpoint\n     */\n    public readonly endpointNumber: number = null;\n\n    /**\n     * The direction of this endpoint\n     */\n    public readonly direction: USBDirection = null;\n\n    /**\n     * The type of this endpoint\n     */\n    public readonly type: USBEndpointType = null;\n\n    /**\n     * The packet size of this endpoint\n     */\n    public readonly packetSize: number = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBEndpoint>) {\n        this.endpointNumber = init.endpointNumber;\n        this.direction = init.direction;\n        this.type = init.type;\n        this.packetSize = init.packetSize;\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { LIBUSB_ENDPOINT_IN } from \"usb\";\nimport { USBDirection } from \"./enums\";\nimport {\n    USBControlTransferParameters,\n    USBInTransferResult,\n    USBOutTransferResult,\n    USBIsochronousInTransferResult,\n    USBIsochronousOutTransferResult\n} from \"./interfaces\";\nimport { USBConfiguration } from \"./configuration\";\nimport { USBInterface } from \"./interface\";\nimport { USBEndpoint } from \"./endpoint\";\nimport { adapter } from \"./adapter\";\n\ninterface EndpointResult {\n    endpoint: USBEndpoint;\n    iface: USBInterface;\n}\n\n/**\n * USB Device\n */\nexport class USBDevice {\n\n    /**\n     * Major USB protocol version supported by the device\n     */\n    public readonly usbVersionMajor: number;\n\n    /**\n     * Minor USB protocol version supported by the device\n     */\n    public readonly usbVersionMinor: number;\n\n    /**\n     * Sub minor USB protocol version supported by the device\n     */\n    public readonly usbVersionSubminor: number;\n\n    /**\n     * Communication interface class of the device\n     */\n    public readonly deviceClass: number;\n\n    /**\n     * Communication interface sub class of the device\n     */\n    public readonly deviceSubclass: number;\n\n    /**\n     * Communication interface protocol of the device\n     */\n    public readonly deviceProtocol: number;\n\n    /**\n     * Vendor Identifier of the device\n     */\n    public readonly vendorId: number;\n\n    /**\n     * Product Identifier of the device\n     */\n    public readonly productId: number;\n\n    /**\n     * Major version of the device\n     */\n    public readonly deviceVersionMajor: number;\n\n    /**\n     * Minor version of the device\n     */\n    public readonly deviceVersionMinor: number;\n\n    /**\n     * Sub minor version of the device\n     */\n    public readonly deviceVersionSubminor: number;\n\n    /**\n     * Manufacturer name of the device\n     */\n    public readonly manufacturerName: string = null;\n\n    /**\n     * Product name of the device\n     */\n    public readonly productName: string = null;\n\n    /**\n     * Serial number of the device\n     */\n    public readonly serialNumber: string = null;\n\n    private _configurations: Array<USBConfiguration> = [];\n    /**\n     * List of configurations supported by the device\n     */\n    public get configurations(): Array<USBConfiguration> {\n        return this._configurations;\n    }\n\n    /**\n     * @hidden\n     */\n    public _currentConfiguration: number = null;\n    /**\n     * The currently selected configuration\n     */\n    public get configuration(): USBConfiguration {\n        return this.configurations.find(configuration => configuration.configurationValue === this._currentConfiguration);\n    }\n\n    /**\n     * @hidden\n     */\n    public get connected(): boolean {\n        return adapter.getConnected(this._handle);\n    }\n\n    /**\n     * A flag indicating whether the device is open\n     */\n    public get opened(): boolean {\n        return adapter.getOpened(this._handle);\n    }\n\n    /**\n     * URL advertised by the device (not part of Web USB specification)\n     */\n    public readonly url: string = null;\n\n    /**\n     * @hidden\n     */\n    public readonly _maxPacketSize: number = 0;\n\n    /**\n     * @hidden\n     */\n    public readonly _handle: string = null;\n\n    /**\n     * @hidden\n     */\n    constructor(init?: Partial<USBDevice>) {\n        this.usbVersionMajor = init.usbVersionMajor;\n        this.usbVersionMinor = init.usbVersionMinor;\n        this.usbVersionSubminor = init.usbVersionSubminor;\n        this.deviceClass = init.deviceClass;\n        this.deviceSubclass = init.deviceSubclass;\n        this.deviceProtocol = init.deviceProtocol;\n        this.vendorId = init.vendorId;\n        this.productId = init.productId;\n        this.deviceVersionMajor = init.deviceVersionMajor;\n        this.deviceVersionMinor = init.deviceVersionMinor;\n        this.deviceVersionSubminor = init.deviceVersionSubminor;\n\n        this.manufacturerName = init.manufacturerName;\n        this.productName = init.productName;\n        this.serialNumber = init.serialNumber;\n\n        this._configurations = init.configurations;\n\n        this.url = init.url;\n        this._maxPacketSize = init._maxPacketSize;\n        this._handle = init._handle;\n        this._currentConfiguration = init._currentConfiguration;\n    }\n\n    private getEndpoint(direction: USBDirection, endpointNumber: number): EndpointResult {\n        let endpoint = null;\n        let iface = null;\n\n        this.configuration.interfaces.some(usbInterface => {\n            endpoint = usbInterface.alternate.endpoints.find(usbEndpoint => {\n                return (usbEndpoint.endpointNumber === endpointNumber && usbEndpoint.direction === direction);\n            });\n\n            if (endpoint) iface = usbInterface;\n            return endpoint;\n        });\n\n        return {\n            endpoint: endpoint,\n            iface: iface\n        };\n    }\n\n    private setupInvalid(setup: USBControlTransferParameters): string {\n        if (setup.recipient === \"interface\") {\n            const interfaceNumber = setup.index & 0xff; // lower 8 bits\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return \"interface not found\";\n            if (!iface.claimed) return \"invalid state\";\n\n        } else if (setup.recipient === \"endpoint\") {\n            const endpointNumber = setup.index & 0x0f; // lower 4 bits\n            const direction = setup.index & LIBUSB_ENDPOINT_IN ? \"in\" : \"out\";\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return \"endpoint not found\";\n            if (!result.iface.claimed) return \"invalid state\";\n        }\n    }\n\n    /**\n     * Opens the device\n     */\n    public open(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"open error: device not found\"));\n            if (this.opened) return resolve();\n\n            adapter.open(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`open error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Closes the device\n     */\n    public close(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"close error: device not found\"));\n            if (!this.opened) return resolve();\n\n            const releaseInterfacePromises = this.configuration.interfaces.map(\n                iface => this.releaseInterface(iface.interfaceNumber));\n\n            Promise.all(releaseInterfacePromises)\n            .catch(_error => { /* Ignore */ })\n            .then(() => adapter.close(this._handle))\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`close error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select a configuration for the device\n     * @param configurationValue The configuration value to select\n     * @returns Promise containing any error\n     */\n    public selectConfiguration(configurationValue: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n\n            // Don't change the configuration if it's already set correctly\n            if (configurationValue === this._currentConfiguration) return resolve();\n\n            if (!this.connected) return reject(new Error(\"selectConfiguration error: device not found\"));\n\n            const config =  this.configurations.find(configuration => configuration.configurationValue === configurationValue);\n            if (!config) return reject(new Error(\"selectConfiguration error: configuration not found\"));\n\n            if (!this.opened) return reject(new Error(\"selectConfiguration error: invalid state\"));\n\n            adapter.selectConfiguration(this._handle, configurationValue)\n            .then(() => {\n                this._currentConfiguration = configurationValue;\n                this.configuration.interfaces.forEach(iface => iface.reset());\n                resolve();\n            })\n            .catch(error => {\n                reject(new Error(`selectConfiguration error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Claim an interface on the device\n     * @param interfaceNumber The interface number to claim\n     * @returns Promise containing any error\n     */\n    public claimInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"claimInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"claimInterface error: interface not found\"));\n            if (!this.opened) return reject(new Error(\"claimInterface error: invalid state\"));\n            if (iface.claimed) return resolve();\n\n            iface.claimInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`claimInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Release an interface on the device\n     * @param interfaceNumber The interface number to release\n     * @returns Promise containing any error\n     */\n    public releaseInterface(interfaceNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"releaseInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"releaseInterface error: interface not found\"));\n            if (!this.opened) return reject(new Error(\"releaseInterface error: invalid state\"));\n            if (!iface.claimed) return resolve();\n\n            iface.releaseInterface()\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`releaseInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Select an alternate interface on the device\n     * @param interfaceNumber The interface number to change\n     * @param alternateSetting The alternate setting to use\n     * @returns Promise containing any error\n     */\n    public selectAlternateInterface(interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"selectAlternateInterface error: device not found\"));\n\n            const iface = this.configuration.interfaces.find(usbInterface => usbInterface.interfaceNumber === interfaceNumber);\n            if (!iface) return reject(new Error(\"selectAlternateInterface error: interface not found\"));\n\n            if (!this.opened || !iface.claimed) return reject(new Error(\"selectAlternateInterface error: invalid state\"));\n\n            iface.selectAlternateInterface(alternateSetting)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`selectAlternateInterface error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer in from the device\n     *\n     * @param setup The USB control transfer parameters\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferIn(setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferIn error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferIn error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferIn error: ${setupError}`));\n\n            adapter.controlTransferIn(this._handle, setup, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a control transfer out to the device\n     *\n     * __Note:__ The bytesWritten always set to the length of the data\n     *\n     * @param setup The USB control transfer parameters\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public controlTransferOut(setup: USBControlTransferParameters, data?: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"controlTransferOut error: device not found\"));\n            if (!this.opened) return reject(new Error(\"controlTransferOut error: invalid state\"));\n\n            const setupError = this.setupInvalid(setup);\n            if (setupError) return reject(new Error(`controlTransferOut error: ${setupError}`));\n\n            adapter.controlTransferOut(this._handle, setup, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`controlTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Clear a halt condition on an endpoint\n     *\n     * @param direction The direction of the endpoint to clear\n     * @param endpointNumber The endpoint number of the endpoint to clear\n     * @returns Promise containing any error\n     */\n    public clearHalt(direction: USBDirection, endpointNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"clearHalt error: device not found\"));\n\n            const result = this.getEndpoint(direction, endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"clearHalt error: endpoint not found\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"clearHalt error: invalid state\"));\n\n            adapter.clearHalt(this._handle, direction, endpointNumber)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`clearHalt error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer in from the device\n     *\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param length The amount of data to transfer\n     * @returns Promise containing a result\n     */\n    public transferIn(endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferIn error: invalid state\"));\n\n            adapter.transferIn(this._handle, endpointNumber, length)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Undertake a transfer out to the device\n     *\n     * __Note:__ The bytesWritten always set to the length of the data\n     *\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @returns Promise containing a result\n     */\n    public transferOut(endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"transferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"transferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"interrupt\" && result.endpoint.type !== \"bulk\") return reject(new Error(\"transferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"transferOut error: invalid state\"));\n\n            adapter.transferOut(this._handle, endpointNumber, data)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`transferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer in from the device\n     * @param endpointNumber The number of the endpoint to transfer from\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferIn(endpointNumber: number, packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferIn error: device not found\"));\n\n            const result = this.getEndpoint(\"in\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferIn error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferIn error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferIn error: invalid state\"));\n\n            adapter.isochronousTransferIn(this._handle, endpointNumber, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferIn error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * @hidden\n     * Undertake an isochronous transfer out to the device\n     * @param endpointNumber The number of the endpoint to transfer to\n     * @param data The data to transfer\n     * @param packetLengths An array of packet lengths outlining the amount to transfer\n     * @returns Promise containing a result\n     */\n    public isochronousTransferOut(endpointNumber: number, data: BufferSource, packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"isochronousTransferOut error: device not found\"));\n\n            const result = this.getEndpoint(\"out\", endpointNumber);\n            if (!result.endpoint) return reject(new Error(\"isochronousTransferOut error: endpoint not found\"));\n            if (result.endpoint.type !== \"isochronous\") return reject(new Error(\"isochronousTransferOut error: invalid access\"));\n            if (!this.opened || !result.iface.claimed) return reject(new Error(\"isochronousTransferOut error: invalid state\"));\n\n            adapter.isochronousTransferOut(this._handle, endpointNumber, data, packetLengths)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`isochronousTransferOut error: ${error}`));\n            });\n        });\n    }\n\n    /**\n     * Soft reset the device\n     * @returns Promise containing any error\n     */\n    public reset(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            if (!this.connected) return reject(new Error(\"reset error: device not found\"));\n            if (!this.opened) return reject(new Error(\"reset error: invalid state\"));\n\n            adapter.reset(this._handle)\n            .then(resolve)\n            .catch(error => {\n                reject(new Error(`reset error: ${error}`));\n            });\n        });\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventEmitter } from \"events\";\nimport {\n    getDeviceList,\n    Device,\n    Endpoint,\n    InEndpoint,\n    OutEndpoint,\n    ConfigDescriptor,\n    InterfaceDescriptor,\n    on,\n    removeListener,\n    LIBUSB_ENDPOINT_IN,\n    LIBUSB_ENDPOINT_OUT,\n    LIBUSB_TRANSFER_OVERFLOW,\n    LIBUSB_TRANSFER_STALL,\n    LIBUSB_TRANSFER_TYPE_INTERRUPT,\n    LIBUSB_TRANSFER_TYPE_BULK,\n    LIBUSB_RECIPIENT_DEVICE,\n    LIBUSB_RECIPIENT_INTERFACE,\n    LIBUSB_RECIPIENT_ENDPOINT,\n    LIBUSB_RECIPIENT_OTHER,\n    LIBUSB_REQUEST_TYPE_STANDARD,\n    LIBUSB_REQUEST_TYPE_CLASS,\n    LIBUSB_REQUEST_TYPE_VENDOR,\n    EndpointDescriptor,\n    DeviceDescriptor,\n    Capability\n} from \"usb\";\nimport {\n    USBControlTransferParameters,\n    USBInTransferResult,\n    USBOutTransferResult,\n    USBIsochronousInTransferResult,\n    USBIsochronousOutTransferResult\n} from \"./interfaces\";\nimport { USBConfiguration } from \"./configuration\";\nimport { USBInterface } from \"./interface\";\nimport { USBAlternateInterface } from \"./alternate\";\nimport { USBEndpoint } from \"./endpoint\";\nimport { USBDevice } from \"./device\";\nimport { USBDirection } from \"./enums\";\n\n/**\n * @hidden\n */\nconst DEFAULT_DELAY_TIMEOUT = 200;\n/**\n * @hidden\n */\nconst DEFAULT_RETRY_COUNT = 10;\n\n/**\n * @hidden\n */\nconst CONSTANTS = {\n    WEB_UUID: \"3408b638-09a9-47a0-8bfd-a0768815b665\",\n    LIBUSB_DT_BOS: 0x0f,\n    LIBUSB_DT_BOS_SIZE: 0x05,\n    LIBUSB_TRANSFER_TYPE_MASK: 0x03,\n    USB_VERSION: 0x201,\n    CAPABILITY_VERSION: 0x0100,\n    URL_REQUEST_TYPE: 0xC0,\n    URL_REQUEST_INDEX: 0x02,\n    CLEAR_FEATURE: 0x01,\n    ENDPOINT_HALT: 0x00\n};\n\n/**\n * @hidden\n */\nexport interface Adapter {\n    getConnected(handle: string): boolean;\n    getOpened(handle: string): boolean;\n\n    listUSBDevices(): Promise<Array<USBDevice>>;\n    open(handle: string): Promise<void>;\n    close(handle: string): Promise<void>;\n    selectConfiguration(handle: string, id: number): Promise<void>;\n    claimInterface(handle: string, address: number): Promise<void>;\n    releaseInterface(handle: string, address: number): Promise<void>;\n    selectAlternateInterface(handle: string, interfaceNumber: number, alternateSetting: number): Promise<void>;\n    controlTransferIn(handle: string, setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult>;\n    controlTransferOut(handle: string, setup: USBControlTransferParameters, data: ArrayBuffer | ArrayBufferView): Promise<USBOutTransferResult>;\n    clearHalt(handle: string, direction: USBDirection, endpointNumber: number): Promise<void>;\n    transferIn(handle: string, endpointNumber: number, length: number): Promise<USBInTransferResult>;\n    transferOut(handle: string, endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult>;\n    isochronousTransferIn(_handle: string, _endpointNumber: number, _packetLengths: Array<number>): Promise<USBIsochronousInTransferResult>;\n    isochronousTransferOut(_handle: string, _endpointNumber: number, _data: BufferSource, _packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult>;\n    reset(handle: string): Promise<void>;\n}\n\n/**\n * @hidden\n */\nexport class USBAdapter extends EventEmitter implements Adapter {\n\n    public static EVENT_DEVICE_CONNECT: string = \"connect\";\n    public static EVENT_DEVICE_DISCONNECT: string = \"disconnect\";\n\n    // Maintains a live list of connected Web USB devices\n    private devices: { [key: string]: { device: Device, url: string }} = {};\n\n    constructor() {\n        super();\n\n        const attachCallback = device => {\n            this.loadDevice(device, DEFAULT_RETRY_COUNT)\n            .then(loadedDevice => {\n                if (loadedDevice) {\n                    const handle = this.getDeviceHandle(loadedDevice);\n                    this.devicetoUSBDevice(handle)\n                    .then(usbDevice => {\n                        if (usbDevice) {\n                            this.emit(USBAdapter.EVENT_DEVICE_CONNECT, usbDevice);\n                        }\n                    });\n                }\n            });\n        };\n\n        const detachCallback = device => {\n            const handle = this.getDeviceHandle(device);\n\n            if (handle && this.devices[handle]) {\n                delete this.devices[handle];\n                this.emit(USBAdapter.EVENT_DEVICE_DISCONNECT, handle);\n            }\n        };\n\n        this.on(\"newListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USBAdapter.EVENT_DEVICE_CONNECT) {\n                on(\"attach\", attachCallback);\n            } else if (event === USBAdapter.EVENT_DEVICE_DISCONNECT) {\n                on(\"detach\", detachCallback);\n            }\n        });\n\n        this.on(\"removeListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USBAdapter.EVENT_DEVICE_CONNECT) {\n                removeListener(\"attach\", attachCallback);\n            } else if (event === USBAdapter.EVENT_DEVICE_DISCONNECT) {\n                removeListener(\"detach\", detachCallback);\n            }\n        });\n    }\n\n    private getDeviceHandle(device: Device): string {\n        if (device.busNumber === null || device.deviceAddress === null) {\n            return null;\n        }\n\n        return `${device.busNumber}.${device.deviceAddress}`;\n    }\n\n    private serialPromises<T>(task: (param: any) => Promise<T>, params: Array<any>): Promise<Array<T>> {\n        function reducer(chain, param) {\n            return chain\n            .then(results => {\n                return task.call(this, param)\n                .then(result => {\n                    if (result) {\n                        results.push(result);\n                    }\n                    return results;\n                });\n            });\n        }\n        return params.reduce(reducer.bind(this), Promise.resolve([]));\n    }\n\n    private serialDevicePromises<T>(task: (device: Device, descriptor: any) => Promise<T>, device: Device, descriptors: Array<any>): Promise<Array<T>> {\n        function reducer(chain, descriptor) {\n            return chain\n            .then(results => {\n                return task.call(this, device, descriptor)\n                .then(result => {\n                    results.push(result);\n                    return results;\n                });\n            });\n        }\n        return descriptors.reduce(reducer.bind(this), Promise.resolve([]));\n    }\n\n    private delay(timeout: number = DEFAULT_DELAY_TIMEOUT): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            setTimeout(resolve, timeout);\n        });\n    }\n\n    private retryPromise(fn: () => Promise<any>, retries: number = 0, timeout: number = DEFAULT_DELAY_TIMEOUT): Promise<void> {\n        return new Promise((resolve, reject) => {\n            fn()\n            .then(resolve)\n            .catch(error => {\n                if (retries === 0) {\n                    return reject(error);\n                }\n\n                return this.delay(timeout)\n                .then(() => this.retryPromise(fn, --retries, timeout))\n                .then(resolve)\n                .catch(retryError => reject(retryError));\n            });\n        });\n    }\n\n    private loadDevices(): Promise<Array<Device>> {\n        // Reset device cache\n        this.devices = {};\n        const devices = getDeviceList();\n        return this.serialPromises(this.loadDevice, devices);\n    }\n\n    private loadDevice(device: Device, retries: number = 0): Promise<Device> {\n\n        // Early guard against unsupported USB devices\n        try {\n            // tslint:disable-next-line:no-unused-expression\n            device.configDescriptor;\n            // tslint:disable-next-line:no-unused-expression\n            device.allConfigDescriptors;\n            // tslint:disable-next-line:no-unused-expression\n            device.deviceDescriptor;\n        } catch (_error) {\n            return Promise.resolve(null);\n        }\n\n        return this.getCapabilities(device, retries)\n        .then(capabilities => this.getWebCapability(capabilities))\n        .then(capability => {\n            return this.getWebUrl(device, capability)\n            .then(url => {\n                const handle = this.getDeviceHandle(device);\n                this.devices[handle] = {\n                    device: device,\n                    url: url\n                };\n                return device;\n            });\n        });\n    }\n\n    private getCapabilities(device: Device, retries: number): Promise<Array<Capability>> {\n        return new Promise((resolve, _reject) => {\n\n            this.openDevice(device, retries)\n            .then(() => {\n                device.getCapabilities((error, capabilities) => {\n                    try {\n                        // Older macs (<10.12) can error with some host devices during a close at this point\n                        device.close();\n                    // tslint:disable-next-line:no-empty\n                    } catch (_error) {}\n                    if (error) return resolve([]);\n                    resolve(capabilities);\n                });\n            })\n            .catch(_error => {\n                resolve([]);\n            });\n        });\n    }\n\n    private getWebCapability(capabilities: Array<Capability>): Capability {\n        const platformCapabilities = capabilities.filter(capability => {\n            return capability.type === 5;\n        });\n\n        const webCapability = platformCapabilities.find(capability => {\n            const uuid = this.decodeUUID(capability.data.slice(1, 17));\n            const version = capability.data.readUInt16LE(17);\n            return uuid === CONSTANTS.WEB_UUID && version === CONSTANTS.CAPABILITY_VERSION;\n        });\n\n        return webCapability;\n    }\n\n    private decodeUUID(buffer: Buffer): string {\n        const data1 = `00000000${buffer.readUInt32LE(0).toString(16)}`.slice(-8);\n        const data2 = `0000${buffer.readUInt16LE(4).toString(16)}`.slice(-4);\n        const data3 = `0000${buffer.readUInt16LE(6).toString(16)}`.slice(-4);\n\n        const data4 = [];\n        for (let i = 8; i < 10; i ++) {\n            data4.push(`00${buffer.readUInt8(i).toString(16)}`.slice(-2));\n        }\n\n        const data5 = [];\n        for (let i = 10; i < 16; i ++) {\n            data5.push(`00${buffer.readUInt8(i).toString(16)}`.slice(-2));\n        }\n\n        return `${data1}-${data2}-${data3}-${data4.join(\"\")}-${data5.join(\"\")}`;\n    }\n\n    private getWebUrl(device: Device, capability: Capability, suppressErrors: boolean = true): Promise<string> {\n        return new Promise((resolve, reject) => {\n            if (!capability || !capability.data || capability.data.byteLength < 20) return resolve(null);\n\n            const vendor = capability.data.readUInt8(19);\n            const page = capability.data.readUInt8(20);\n\n            this.openDevice(device)\n            .then(() => {\n                device.controlTransfer(CONSTANTS.URL_REQUEST_TYPE, vendor, page, CONSTANTS.URL_REQUEST_INDEX, 64, (error, buffer) => {\n                    device.close();\n\n                    if (error) {\n                        // An error may be due to the URL not existing\n                        if (suppressErrors) return resolve(null);\n                        else return reject(error);\n                    }\n\n                    // const length = buffer.readUInt8(0);\n                    // const type = buffer.readUInt8(1);\n                    let url = buffer.toString(\"utf8\", 3);\n\n                    const scheme = buffer.readUInt8(2); // 0 - http, 1 - https, 255 - in url\n                    if (scheme === 0) url = \"http://\" + url;\n                    if (scheme === 1) url = \"https://\" + url;\n\n                    resolve(url);\n                });\n            })\n            .catch(_error => {\n                resolve(\"\");\n            });\n        });\n    }\n\n    private devicetoUSBDevice(handle: string): Promise<USBDevice> {\n        return new Promise((resolve, _reject) => {\n            const device = this.devices[handle].device;\n            const url = this.devices[handle].url;\n\n            let configs: Array<ConfigDescriptor> = null;\n            let configDescriptor: ConfigDescriptor = null;\n            let deviceDescriptor: DeviceDescriptor = null;\n\n            try {\n                configDescriptor = device.configDescriptor;\n                configs = device.allConfigDescriptors;\n                deviceDescriptor = device.deviceDescriptor;\n            } catch (_error) {\n                return resolve(null);\n            }\n\n            if (!configs) return resolve(null);\n\n            return this.serialDevicePromises(this.configToUSBConfiguration, device, configs)\n            .then(configurations => {\n\n                if (!deviceDescriptor) {\n                    return resolve(new USBDevice({\n                        _handle: this.getDeviceHandle(device),\n                        url: url,\n                        configurations: configurations\n                    }));\n                }\n\n                const deviceVersion = this.decodeVersion(deviceDescriptor.bcdDevice);\n                const usbVersion = this.decodeVersion(deviceDescriptor.bcdUSB);\n                let manufacturerName = null;\n                let productName = null;\n\n                return this.getStringDescriptor(device, deviceDescriptor.iManufacturer)\n                .then(name => {\n                    manufacturerName = name;\n                    return this.getStringDescriptor(device, deviceDescriptor.iProduct);\n                })\n                .then(name => {\n                    productName = name;\n                    return this.getStringDescriptor(device, deviceDescriptor.iSerialNumber);\n                })\n                .then(serialNumber => {\n                    const props: Partial<USBDevice> = {\n                        _handle: this.getDeviceHandle(device),\n                        _maxPacketSize: deviceDescriptor.bMaxPacketSize0,\n                        url: url,\n                        deviceClass: deviceDescriptor.bDeviceClass,\n                        deviceSubclass: deviceDescriptor.bDeviceSubClass,\n                        deviceProtocol: deviceDescriptor.bDeviceProtocol,\n                        productId: deviceDescriptor.idProduct,\n                        vendorId: deviceDescriptor.idVendor,\n                        deviceVersionMajor: deviceVersion.major,\n                        deviceVersionMinor: deviceVersion.minor,\n                        deviceVersionSubminor: deviceVersion.sub,\n                        usbVersionMajor: usbVersion.major,\n                        usbVersionMinor: usbVersion.minor,\n                        usbVersionSubminor: usbVersion.sub,\n                        manufacturerName: manufacturerName,\n                        productName: productName,\n                        serialNumber: serialNumber,\n                        configurations: configurations,\n                        _currentConfiguration: configDescriptor.bConfigurationValue\n                    };\n                    return resolve(new USBDevice(props));\n                });\n            }).catch(_error => {\n                resolve(null);\n            });\n        });\n    }\n\n    private decodeVersion(version: number): { [key: string]: number } {\n        const hex = `0000${version.toString(16)}`.slice(-4);\n        return {\n            major: parseInt(hex.substr(0, 2), null),\n            minor: parseInt(hex.substr(2, 1), null),\n            sub: parseInt(hex.substr(3, 1), null),\n        };\n    }\n\n    private getStringDescriptor(device: Device, index: number): Promise<string> {\n        return new Promise(resolve => {\n            this.openDevice(device)\n            .then(() => {\n                device.getStringDescriptor(index, (error, buffer) => {\n                    device.close();\n                    resolve(error ? \"\" : buffer.toString());\n                });\n            })\n            .catch(_error => {\n                resolve(\"\");\n            });\n        });\n    }\n\n    private bufferToDataView(buffer: Buffer): DataView {\n        const arrayBuffer = new Uint8Array(buffer).buffer;\n        return new DataView(arrayBuffer);\n    }\n\n    private bufferSourceToBuffer(bufferSource: ArrayBuffer | ArrayBufferView): Buffer {\n        const arrayBuffer = ArrayBuffer.isView(bufferSource)\n            ? bufferSource.buffer.slice(bufferSource.byteOffset, bufferSource.byteOffset + bufferSource.byteLength)\n            : bufferSource;\n\n        return Buffer.from(arrayBuffer);\n    }\n\n    private getEndpoint(device: Device, direction: USBDirection, endpointNumber: number): Endpoint {\n        let endpoint: Endpoint = null;\n        const address = endpointNumber | (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT);\n\n        device.interfaces.some(iface => {\n            const epoint = iface.endpoint(address);\n\n            if (epoint) {\n                endpoint = epoint;\n                return true;\n            }\n            return false;\n        });\n\n        return endpoint;\n    }\n\n    private getInEndpoint(device: Device, endpointNumber: number): InEndpoint {\n        const endpoint = this.getEndpoint(device, \"in\", endpointNumber);\n        if (endpoint && endpoint.direction === \"in\") return (endpoint as InEndpoint);\n    }\n\n    private getOutEndpoint(device: Device, endpointNumber: number): OutEndpoint {\n        const endpoint = this.getEndpoint(device, \"out\", endpointNumber);\n        if (endpoint && endpoint.direction === \"out\") return (endpoint as OutEndpoint);\n    }\n\n    private endpointToUSBEndpoint(descriptor: EndpointDescriptor): USBEndpoint {\n        const direction = descriptor.bEndpointAddress & LIBUSB_ENDPOINT_IN ? \"in\" : \"out\";\n        return new USBEndpoint({\n            endpointNumber: descriptor.bEndpointAddress ^ (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT),\n            direction: direction,\n            type: (descriptor.bmAttributes & CONSTANTS.LIBUSB_TRANSFER_TYPE_MASK) === LIBUSB_TRANSFER_TYPE_BULK ? \"bulk\"\n                : (descriptor.bmAttributes & CONSTANTS.LIBUSB_TRANSFER_TYPE_MASK) === LIBUSB_TRANSFER_TYPE_INTERRUPT ? \"interrupt\"\n                : \"isochronous\",\n            packetSize: descriptor.wMaxPacketSize\n        });\n    }\n\n    private interfaceToUSBAlternateInterface(device: Device, descriptor: InterfaceDescriptor): Promise<USBAlternateInterface> {\n        return this.getStringDescriptor(device, descriptor.iInterface)\n        .then(name => {\n            return new USBAlternateInterface({\n                alternateSetting: descriptor.bAlternateSetting,\n                interfaceClass: descriptor.bInterfaceClass,\n                interfaceSubclass: descriptor.bInterfaceSubClass,\n                interfaceProtocol: descriptor.bInterfaceProtocol,\n                interfaceName: name,\n                endpoints: descriptor.endpoints.map(this.endpointToUSBEndpoint)\n            });\n        });\n    }\n\n    private interfacesToUSBInterface(device: Device, descriptors: Array<InterfaceDescriptor>): Promise<USBInterface> {\n        return this.serialDevicePromises(this.interfaceToUSBAlternateInterface, device, descriptors)\n        .then(alternates => {\n            return new USBInterface({\n                _handle: this.getDeviceHandle(device),\n                interfaceNumber: descriptors[0].bInterfaceNumber,\n                alternates: alternates\n            });\n        });\n    }\n\n    private configToUSBConfiguration(device: Device, descriptor: ConfigDescriptor): Promise<USBConfiguration> {\n        return this.getStringDescriptor(device, descriptor.iConfiguration)\n        .then(name => {\n            const allInterfaces = descriptor.interfaces || [];\n\n            return this.serialDevicePromises(this.interfacesToUSBInterface, device, allInterfaces)\n            .then(interfaces => {\n                return new USBConfiguration({\n                    configurationValue: descriptor.bConfigurationValue,\n                    configurationName: name,\n                    interfaces: interfaces\n                });\n            });\n        });\n    }\n\n    private getDevice(handle: string): Device {\n        if (!this.devices[handle]) return null;\n        return this.devices[handle].device;\n    }\n\n    private controlTransferParamsToType(setup: USBControlTransferParameters, direction: number): number {\n        const recipient = setup.recipient === \"device\" ? LIBUSB_RECIPIENT_DEVICE\n                        : setup.recipient === \"interface\" ? LIBUSB_RECIPIENT_INTERFACE\n                        : setup.recipient === \"endpoint\" ? LIBUSB_RECIPIENT_ENDPOINT\n                        : LIBUSB_RECIPIENT_OTHER;\n\n        const requestType = setup.requestType === \"standard\" ? LIBUSB_REQUEST_TYPE_STANDARD\n                          : setup.requestType === \"class\" ? LIBUSB_REQUEST_TYPE_CLASS\n                          : LIBUSB_REQUEST_TYPE_VENDOR;\n\n        return recipient | requestType | direction;\n    }\n\n    private openDevice(device: Device, retries: number = 0): Promise<void> {\n        return this.retryPromise(() => {\n            return new Promise<void>((resolve, reject) => {\n                try {\n                    device.open();\n                } catch (error) {\n                    return reject(error);\n                }\n                resolve();\n            });\n        }, retries);\n    }\n\n    public getConnected(handle: string): boolean {\n        return this.getDevice(handle) !== null;\n    }\n\n    public getOpened(handle: string): boolean {\n        const device = this.getDevice(handle);\n        if (!device) return false;\n        return (device.interfaces !== null);\n    }\n\n    public listUSBDevices(): Promise<Array<USBDevice>> {\n        return this.loadDevices()\n        .then(() => {\n            return this.serialPromises(this.devicetoUSBDevice, Object.keys(this.devices));\n        });\n    }\n\n    public open(handle: string): Promise<void> {\n        const device = this.getDevice(handle);\n        return this.openDevice(device);\n    }\n\n    public close(handle: string): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n            device.close();\n            resolve();\n        });\n    }\n\n    public selectConfiguration(handle: string, id: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n\n            device.setConfiguration(id, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public claimInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, _reject) => {\n            const device = this.getDevice(handle);\n\n            device.interface(address).claim();\n            resolve();\n        });\n    }\n\n    public releaseInterface(handle: string, address: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n\n            device.interface(address).release(true, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public selectAlternateInterface(handle: string, interfaceNumber: number, alternateSetting: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const iface = device.interface(interfaceNumber);\n\n            iface.setAltSetting(alternateSetting, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public controlTransferIn(handle: string, setup: USBControlTransferParameters, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = this.controlTransferParamsToType(setup, LIBUSB_ENDPOINT_IN);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, length, (error, buffer) => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            status: \"stall\"\n                        });\n                    } else if (error.errno === LIBUSB_TRANSFER_OVERFLOW) {\n                        return resolve({\n                            status: \"babble\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    data: this.bufferToDataView(buffer),\n                    status: \"ok\"\n                });\n            });\n        });\n    }\n\n    public controlTransferOut(handle: string, setup: USBControlTransferParameters, data?: ArrayBuffer | ArrayBufferView): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const type = this.controlTransferParamsToType(setup, LIBUSB_ENDPOINT_OUT);\n            const buffer = data ? this.bufferSourceToBuffer(data) : new Buffer(0);\n\n            device.controlTransfer(type, setup.request, setup.value, setup.index, buffer, error => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            bytesWritten: 0,\n                            status: \"stall\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    bytesWritten: buffer.byteLength, // hack, should be bytes actually written\n                    status: \"ok\" // hack\n                });\n            });\n        });\n    }\n\n    public clearHalt(handle: string, direction: USBDirection, endpointNumber: number): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const wIndex = endpointNumber | (direction === \"in\" ? LIBUSB_ENDPOINT_IN : LIBUSB_ENDPOINT_OUT);\n            device.controlTransfer(LIBUSB_RECIPIENT_ENDPOINT, CONSTANTS.CLEAR_FEATURE, CONSTANTS.ENDPOINT_HALT, wIndex, 0, error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n\n    public transferIn(handle: string, endpointNumber: number, length: number): Promise<USBInTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getInEndpoint(device, endpointNumber);\n\n            endpoint.transfer(length, (error, data) => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            status: \"stall\"\n                        });\n                    } else if (error.errno === LIBUSB_TRANSFER_OVERFLOW) {\n                        return resolve({\n                            status: \"babble\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    data: this.bufferToDataView(data),\n                    status: \"ok\"\n                });\n            });\n        });\n    }\n\n    public transferOut(handle: string, endpointNumber: number, data: BufferSource): Promise<USBOutTransferResult> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            const endpoint = this.getOutEndpoint(device, endpointNumber);\n            const buffer = this.bufferSourceToBuffer(data);\n\n            endpoint.transfer(buffer, error => {\n                if (error) {\n                    if (error.errno === LIBUSB_TRANSFER_STALL) {\n                        return resolve({\n                            bytesWritten: 0,\n                            status: \"stall\"\n                        });\n                    }\n\n                    return reject(error);\n                }\n\n                resolve({\n                    bytesWritten: buffer.byteLength, // hack, should be bytes actually written\n                    status: \"ok\" // hack\n                });\n            });\n        });\n    }\n\n    public isochronousTransferIn(_handle: string, _endpointNumber: number, _packetLengths: Array<number>): Promise<USBIsochronousInTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferIn error: method not implemented\");\n        });\n    }\n\n    public isochronousTransferOut(_handle: string, _endpointNumber: number, _data: BufferSource, _packetLengths: Array<number>): Promise<USBIsochronousOutTransferResult> {\n        return new Promise((_resolve, reject) => {\n            reject(\"isochronousTransferOut error: method not implemented\");\n        });\n    }\n\n    public reset(handle: string): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const device = this.getDevice(handle);\n            device.reset(error => {\n                if (error) return reject(error);\n                resolve();\n            });\n        });\n    }\n}\n\n/**\n * @hidden\n */\nexport const adapter = new USBAdapter();\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { EventDispatcher } from \"./dispatcher\";\nimport { USBDevice } from \"./device\";\nimport { USBOptions, USBDeviceRequestOptions } from \"./interfaces\";\nimport { USBAdapter, adapter } from \"./adapter\";\n\n/**\n * USB class\n */\nexport class USB extends EventDispatcher {\n    /**\n     * Allowed device Connected event\n     * @event\n     */\n    public static EVENT_DEVICE_CONNECT: string = \"connect\";\n\n    /**\n     * Allowed device Disconnected event\n     * @event\n     */\n    public static EVENT_DEVICE_DISCONNECT: string = \"disconnect\";\n\n    private allowedDevices: Array<USBDevice> = [];\n    private devicesFound: (devices: Array<USBDevice>) => Promise<USBDevice | void>;\n\n    /**\n     * USB constructor\n     * @param options USB initialisation options\n     */\n    constructor(options?: USBOptions) {\n        super();\n\n        options = options || {};\n        this.devicesFound = options.devicesFound;\n\n        const deviceConnectCallback = device => {\n            // When connected, emit an event if it was a known allowed device\n            if (this.replaceAllowedDevice(device)) {\n                this.emit(USB.EVENT_DEVICE_CONNECT, device);\n            }\n        };\n\n        const deviceDisconnectCallback = handle => {\n            // When disconnected, emit an event if the device was a known allowed device\n            const allowedDevice = this.allowedDevices.find(allowedDevices => allowedDevices._handle === handle);\n\n            if (allowedDevice) {\n                this.emit(USB.EVENT_DEVICE_DISCONNECT, allowedDevice);\n            }\n        };\n\n        this.on(\"newListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USB.EVENT_DEVICE_CONNECT) {\n                adapter.addListener(USBAdapter.EVENT_DEVICE_CONNECT, deviceConnectCallback);\n            } else if (event === USB.EVENT_DEVICE_DISCONNECT) {\n                adapter.addListener(USBAdapter.EVENT_DEVICE_DISCONNECT, deviceDisconnectCallback);\n            }\n        });\n\n        this.on(\"removeListener\", event => {\n            const listenerCount = this.listenerCount(event);\n\n            if (listenerCount !== 0) {\n                return;\n            }\n\n            if (event === USB.EVENT_DEVICE_CONNECT) {\n                adapter.removeListener(USBAdapter.EVENT_DEVICE_CONNECT, deviceConnectCallback);\n            } else if (event === USB.EVENT_DEVICE_DISCONNECT) {\n                adapter.removeListener(USBAdapter.EVENT_DEVICE_DISCONNECT, deviceDisconnectCallback);\n            }\n        });\n    }\n\n    private replaceAllowedDevice(device: USBDevice): boolean {\n        for (const i in this.allowedDevices) {\n            if (this.isSameDevice(device, this.allowedDevices[i])) {\n                this.allowedDevices[i] = device;\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    private isSameDevice(device1: USBDevice, device2: USBDevice): boolean {\n        return (device1.productId === device2.productId\n             && device1.vendorId === device2.vendorId\n             && device1.serialNumber === device2.serialNumber);\n    }\n\n    private filterDevice(options: USBDeviceRequestOptions, device: USBDevice): boolean {\n        return options.filters.some(filter => {\n            // Vendor\n            if (filter.vendorId && filter.vendorId !== device.vendorId) return false;\n\n            // Product\n            if (filter.productId && filter.productId !== device.productId) return false;\n\n            // Class\n            if (filter.classCode) {\n\n                // Interface Descriptors\n                const match = device.configuration.interfaces.some(iface => {\n                    // Class\n                    if (filter.classCode && filter.classCode !== iface.alternate.interfaceClass) return false;\n\n                    // Subclass\n                    if (filter.subclassCode && filter.subclassCode !== iface.alternate.interfaceSubclass) return false;\n\n                    // Protocol\n                    if (filter.protocolCode && filter.protocolCode !== iface.alternate.interfaceProtocol) return false;\n\n                    return true;\n                });\n\n                if (match) return true;\n            }\n\n            // Class\n            if (filter.classCode && filter.classCode !== device.deviceClass) return false;\n\n            // Subclass\n            if (filter.subclassCode && filter.subclassCode !== device.deviceSubclass) return false;\n\n            // Protocol\n            if (filter.protocolCode && filter.protocolCode !== device.deviceProtocol) return false;\n\n            // Serial\n            if (filter.serialnumber && filter.serialnumber !== device.serialNumber) return false;\n\n            return true;\n        });\n    }\n\n    /**\n     * Gets all allowed Web USB devices which are connected\n     * @returns Promise containing an array of devices\n     */\n    public getDevices(): Promise<Array<USBDevice>> {\n        // Refresh devices and filter for allowed ones\n        return adapter.listUSBDevices()\n        .then(devices => {\n            const allowed = devices.filter(device => {\n                if (!device.connected) {\n                    return false;\n                }\n\n                for (const i in this.allowedDevices) {\n                    if (this.isSameDevice(device, this.allowedDevices[i])) {\n                        return true;\n                    }\n                }\n\n                return false;\n            });\n\n            return allowed;\n        });\n    }\n\n    /**\n     * Requests a single Web USB device\n     * @param options The options to use when scanning\n     * @returns Promise containing the selected device\n     */\n    public requestDevice(options: USBDeviceRequestOptions): Promise<USBDevice> {\n        return new Promise((resolve, reject) => {\n            // Must have options\n            if (!options) {\n                return reject(new TypeError(\"requestDevice error: 1 argument required, but only 0 present\"));\n            }\n\n            // Options must be an object\n            if (options.constructor !== {}.constructor) {\n                return reject(new TypeError(\"requestDevice error: parameter 1 (options) is not an object\"));\n            }\n\n            // Must have a filter\n            if (!options.filters) {\n                return reject(new TypeError(\"requestDevice error: required member filters is undefined\"));\n            }\n\n            // Filter must be an array\n            if (options.filters.constructor !== [].constructor) {\n                return reject(new TypeError(\"requestDevice error: the provided value cannot be converted to a sequence\"));\n            }\n\n            // Check filters\n            const check = options.filters.every(filter => {\n\n                // Protocol & Subclass\n                if (filter.protocolCode && !filter.subclassCode) {\n                    reject(new TypeError(\"requestDevice error: subclass code is required\"));\n                    return false;\n                }\n\n                // Subclass & Class\n                if (filter.subclassCode && !filter.classCode) {\n                    reject(new TypeError(\"requestDevice error: class code is required\"));\n                    return false;\n                }\n\n                return true;\n            });\n\n            if (!check) return;\n\n            return adapter.listUSBDevices()\n            .then(devices => {\n                devices = devices.filter(device => this.filterDevice(options, device));\n\n                if (devices.length === 0) {\n                    return reject(new Error(\"requestDevice error: no devices found\"));\n                }\n\n                function selectFn(device: USBDevice) {\n                    if (!this.replaceAllowedDevice(device)) this.allowedDevices.push(device);\n                    resolve(device);\n                }\n\n                // If no devicesFound function, select the first device found\n                if (!this.devicesFound) return selectFn.call(this, devices[0]);\n\n                return this.devicesFound(devices)\n                .then(device => {\n                    if (!device) {\n                        reject(new Error(\"selected device not found\"));\n                    }\n\n                    return selectFn.call(this, device);\n                });\n            }).catch(error => {\n                reject(new Error(`requestDevice error: ${error}`));\n            });\n        });\n    }\n}\n","/*\n* Node WebUSB\n* Copyright (c) 2017 Rob Moran\n*\n* The MIT License (MIT)\n*\n* Permission is hereby granted, free of charge, to any person obtaining a copy\n* of this software and associated documentation files (the \"Software\"), to deal\n* in the Software without restriction, including without limitation the rights\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n* copies of the Software, and to permit persons to whom the Software is\n* furnished to do so, subject to the following conditions:\n*\n* The above copyright notice and this permission notice shall be included in all\n* copies or substantial portions of the Software.\n*\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n* SOFTWARE.\n*/\n\nimport { USB } from \"./usb\";\n\n/**\n * Default usb instance synonymous with `navigator.usb`\n */\nexport const usb = new USB();\n\n/**\n * USB class for creating new instances\n */\nexport { USB };\n\n/**\n * Adapter\n */\nexport {\n    adapter,\n    USBAdapter\n} from \"./adapter\";\n\n/**\n * Interfaces\n */\nexport {\n    USBOptions,\n    USBDeviceFilter,\n    USBDeviceRequestOptions,\n    USBControlTransferParameters,\n    USBInTransferResult,\n    USBOutTransferResult,\n    USBIsochronousInTransferPacket,\n    USBIsochronousInTransferResult,\n    USBIsochronousOutTransferPacket,\n    USBIsochronousOutTransferResult\n} from \"./interfaces\";\n\n/**\n * Enums\n */\nexport {\n    USBDirection,\n    USBEndpointType,\n    USBRecipient,\n    USBRequestType,\n    USBTransferStatus\n} from \"./enums\";\n\n/**\n * Other classes if required\n */\nexport { USBAlternateInterface } from \"./alternate\";\nexport { USBConfiguration } from \"./configuration\";\nexport { USBDevice } from \"./device\";\nexport { USBEndpoint } from \"./endpoint\";\nexport { USBInterface } from \"./interface\";\n"],"names":["EventHandlers","EventEmitter","init","call","this","$getMaxListeners","that","undefined","_maxListeners","defaultMaxListeners","emitNone","handler","isFn","self","len","length","listeners","arrayClone","i","emitOne","arg1","emitTwo","arg2","emitThree","arg3","emitMany","args","apply","_addListener","target","type","listener","prepend","m","events","existing","e","TypeError","_events","newListener","emit","_eventsCount","unshift","push","warned","w","Error","name","emitter","count","console","warn","log","_onceWrap","fired","g","removeListener","arguments","listenerCount","evlistener","arr","copy","Array","prototype","Object","create","usingDomains","domain","active","Domain","getPrototypeOf","setMaxListeners","n","isNaN","getMaxListeners","er","doError","error","err","context","domainEmitter","domainThrown","addListener","on","prependListener","once","prependOnceListener","list","position","originalListener","index","k","pop","spliceOne","removeAllListeners","key","keys","ret","unwrapListeners","eventNames","Reflect","ownKeys","EventDispatcher","[object Object]","event","super","value","USBConfiguration","configurationValue","configurationName","interfaces","USBInterface","interfaceNumber","alternates","_handle","claimed","_claimed","alternate","find","alternateSetting","_currentAlternate","adapter","selectAlternateInterface","then","claimInterface","releaseInterface","USBAlternateInterface","interfaceClass","interfaceSubclass","interfaceProtocol","interfaceName","endpoints","USBEndpoint","endpointNumber","direction","packetSize","USBDevice","usbVersionMajor","usbVersionMinor","usbVersionSubminor","deviceClass","deviceSubclass","deviceProtocol","vendorId","productId","deviceVersionMajor","deviceVersionMinor","deviceVersionSubminor","manufacturerName","productName","serialNumber","_configurations","configurations","url","_maxPacketSize","_currentConfiguration","configuration","connected","getConnected","opened","getOpened","endpoint","iface","some","usbInterface","usbEndpoint","setup","recipient","LIBUSB_ENDPOINT_IN","result","getEndpoint","Promise","resolve","reject","open","catch","releaseInterfacePromises","map","all","_error","close","selectConfiguration","forEach","reset","setupError","setupInvalid","controlTransferIn","data","controlTransferOut","clearHalt","transferIn","transferOut","packetLengths","isochronousTransferIn","isochronousTransferOut","DEFAULT_DELAY_TIMEOUT","DEFAULT_RETRY_COUNT","CONSTANTS","WEB_UUID","LIBUSB_DT_BOS","LIBUSB_DT_BOS_SIZE","LIBUSB_TRANSFER_TYPE_MASK","USB_VERSION","CAPABILITY_VERSION","URL_REQUEST_TYPE","URL_REQUEST_INDEX","CLEAR_FEATURE","ENDPOINT_HALT","USBAdapter","attachCallback","device","loadDevice","loadedDevice","handle","getDeviceHandle","devicetoUSBDevice","usbDevice","EVENT_DEVICE_CONNECT","detachCallback","devices","EVENT_DEVICE_DISCONNECT","busNumber","deviceAddress","task","params","reduce","chain","param","results","bind","descriptors","descriptor","timeout","_reject","setTimeout","fn","retries","delay","retryPromise","retryError","getDeviceList","serialPromises","configDescriptor","allConfigDescriptors","deviceDescriptor","getCapabilities","capabilities","getWebCapability","capability","getWebUrl","openDevice","filter","uuid","decodeUUID","slice","version","readUInt16LE","buffer","data1","readUInt32LE","toString","data2","data3","data4","readUInt8","data5","join","suppressErrors","byteLength","vendor","page","controlTransfer","scheme","configs","serialDevicePromises","configToUSBConfiguration","deviceVersion","decodeVersion","bcdDevice","usbVersion","bcdUSB","getStringDescriptor","iManufacturer","iProduct","iSerialNumber","props","bMaxPacketSize0","bDeviceClass","bDeviceSubClass","bDeviceProtocol","idProduct","idVendor","major","minor","sub","bConfigurationValue","hex","parseInt","substr","arrayBuffer","Uint8Array","DataView","bufferSource","ArrayBuffer","isView","byteOffset","Buffer","from","address","LIBUSB_ENDPOINT_OUT","epoint","bEndpointAddress","bmAttributes","LIBUSB_TRANSFER_TYPE_BULK","LIBUSB_TRANSFER_TYPE_INTERRUPT","wMaxPacketSize","iInterface","bAlternateSetting","bInterfaceClass","bInterfaceSubClass","bInterfaceProtocol","endpointToUSBEndpoint","interfaceToUSBAlternateInterface","bInterfaceNumber","iConfiguration","allInterfaces","interfacesToUSBInterface","LIBUSB_RECIPIENT_DEVICE","LIBUSB_RECIPIENT_INTERFACE","LIBUSB_RECIPIENT_ENDPOINT","LIBUSB_RECIPIENT_OTHER","requestType","LIBUSB_REQUEST_TYPE_STANDARD","LIBUSB_REQUEST_TYPE_CLASS","LIBUSB_REQUEST_TYPE_VENDOR","getDevice","loadDevices","id","setConfiguration","interface","claim","release","setAltSetting","controlTransferParamsToType","request","errno","LIBUSB_TRANSFER_STALL","status","LIBUSB_TRANSFER_OVERFLOW","bufferToDataView","bufferSourceToBuffer","bytesWritten","wIndex","getInEndpoint","transfer","getOutEndpoint","_endpointNumber","_packetLengths","_resolve","_data","USB","options","devicesFound","deviceConnectCallback","replaceAllowedDevice","deviceDisconnectCallback","allowedDevice","allowedDevices","isSameDevice","device1","device2","filters","classCode","subclassCode","protocolCode","serialnumber","listUSBDevices","constructor","every","filterDevice","selectFn","usb"],"mappings":"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"}